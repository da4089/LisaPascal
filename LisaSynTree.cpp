// This file was automatically generated by EbnfStudio; don't modify it!
#include "LisaSynTree.h"
using namespace Lisa;

SynTree::SynTree(quint16 r, const Token& t ):d_tok(r){
	d_tok.d_lineNr = t.d_lineNr;
	d_tok.d_colNr = t.d_colNr;
	d_tok.d_sourcePath = t.d_sourcePath;
}

const char* SynTree::rToStr( quint16 r ) {
	switch(r) {
		case R_LisaPascal: return "LisaPascal";
		case R_actual_parameter: return "actual_parameter";
		case R_actual_parameter_list: return "actual_parameter_list";
		case R_addition_operator: return "addition_operator";
		case R_array_type: return "array_type";
		case R_assigOrCall: return "assigOrCall";
		case R_assignment_statement_: return "assignment_statement";
		case R_block: return "block";
		case R_body_: return "body_";
		case R_case_label_list: return "case_label_list";
		case R_case_limb: return "case_limb";
		case R_case_statement: return "case_statement";
		case R_class_type: return "class_type";
		case R_comment_: return "comment";
		case R_compound_statement: return "compound_statement";
		case R_conditional_statement: return "conditional_statement";
		case R_constant: return "constant";
		case R_constant_declaration: return "constant_declaration";
		case R_constant_declaration_part: return "constant_declaration_part";
		case R_constant_identifier_: return "constant_identifier";
		case R_dereferencer: return "dereferencer";
		case R_enumerated_type: return "enumerated_type";
		case R_expression: return "expression";
		case R_expression_list: return "expression_list";
		case R_factor: return "factor";
		case R_field_declaration: return "field_declaration";
		case R_field_designator: return "field_designator";
		case R_field_identifier: return "field_identifier";
		case R_field_list: return "field_list";
		case R_file_type: return "file_type";
		case R_final_value: return "final_value";
		case R_fixed_part: return "fixed_part";
		case R_for_statement: return "for_statement";
		case R_formal_parameter_list: return "formal_parameter_list";
		case R_formal_parameter_section: return "formal_parameter_section";
		case R_function_declaration: return "function_declaration";
		case R_function_heading: return "function_heading";
		case R_function_identifier_: return "function_identifier";
		case R_goto_statement: return "goto_statement";
		case R_identifier_list: return "identifier_list";
		case R_identifier_list2: return "identifier_list2";
		case R_if_statement: return "if_statement";
		case R_implementation_part: return "implementation_part";
		case R_index: return "index";
		case R_index_type: return "index_type";
		case R_initial_value: return "initial_value";
		case R_interface_part: return "interface_part";
		case R_label_: return "label_";
		case R_label_declaration_part: return "label_declaration_part";
		case R_member_group: return "member_group";
		case R_method_block: return "method_block";
		case R_method_interface: return "method_interface";
		case R_multiplication_operator: return "multiplication_operator";
		case R_non_regular_unit: return "non_regular_unit";
		case R_ordinal_type: return "ordinal_type";
		case R_otherwise_clause: return "otherwise_clause";
		case R_parameter_declaration: return "parameter_declaration";
		case R_pointer_type: return "pointer_type";
		case R_procedure_and_function_declaration_part: return "procedure_and_function_declaration_part";
		case R_procedure_and_function_interface_part: return "procedure_and_function_interface_part";
		case R_procedure_declaration: return "procedure_declaration";
		case R_procedure_heading: return "procedure_heading";
		case R_procedure_identifier_: return "procedure_identifier";
		case R_procedure_statement_: return "procedure_statement";
		case R_program_: return "program_";
		case R_program_heading: return "program_heading";
		case R_program_parameters: return "program_parameters";
		case R_qualifier: return "qualifier";
		case R_record_type: return "record_type";
		case R_regular_unit: return "regular_unit";
		case R_relational_operator: return "relational_operator";
		case R_repeat_statement: return "repeat_statement";
		case R_repetitive_statement: return "repetitive_statement";
		case R_result_type: return "result_type";
		case R_set_literal: return "set_literal";
		case R_set_type: return "set_type";
		case R_sign: return "sign";
		case R_simple_expression: return "simple_expression";
		case R_simple_statement: return "simple_statement";
		case R_simple_type: return "simple_type";
		case R_size_attribute: return "size_attribute";
		case R_statement: return "statement";
		case R_statement_part: return "statement_part";
		case R_statement_sequence: return "statement_sequence";
		case R_string_type: return "string_type";
		case R_structured_statement: return "structured_statement";
		case R_structured_type: return "structured_type";
		case R_subrange_type: return "subrange_type";
		case R_subroutine_part: return "subroutine_part";
		case R_tag_field: return "tag_field";
		case R_term: return "term";
		case R_type_: return "type_";
		case R_type_declaration: return "type_declaration";
		case R_type_declaration_part: return "type_declaration_part";
		case R_type_identifier: return "type_identifier";
		case R_unit_heading: return "unit_heading";
		case R_unsigned_integer: return "unsigned_integer";
		case R_unsigned_number: return "unsigned_number";
		case R_uses_clause: return "uses_clause";
		case R_variable_declaration: return "variable_declaration";
		case R_variable_declaration_part: return "variable_declaration_part";
		case R_variable_identifier: return "variable_identifier";
		case R_variable_reference: return "variable_reference";
		case R_variant: return "variant";
		case R_variant_part: return "variant_part";
		case R_while_statement: return "while_statement";
		case R_with_statement: return "with_statement";
	default: if(r<R_First) return tokenTypeName(r); else return "";
}
}
